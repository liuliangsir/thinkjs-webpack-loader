/**
 * @file FileLoaderFactory 模块
 * @author liuliang(liuliang@w3ctech.com)
 */

import {
  fileLoader as FileLoader
} from '../loaders';

/** @namespace loader */
const loader = {

};

/**
 * FileLoaderFactory 模块
 * @module module:fileLoaderFactory
 * @exports module:fileLoaderFactory.FileLoaderFactory
 */
class FileLoaderFactory {
  /**
   * get loader instance using configName
   * @param {Object} [config={}] - the mixed config
   * @param {Object} [config.baseConfig={}] - the base config
   * @param {string} config.groupName - the name of group
   * @returns {FileLoader}
   * @memberof FileLoaderFactory
   * @instance
   * @public
   * @see module:fileLoader
   */
  getLoader({ baseConfig, groupName } = { baseConfig: {} }) {
    if (!loader[groupName]) {
      loader[groupName] = new FileLoader(groupName, baseConfig);
    }
    return loader[groupName];
  }
  /**
   * get bundled file using bundleName and configName
   * @param {string} bundleName - the name of bundle
   * @param {string} extension - the filename extension
   * @param {Object} config - the mixed config
   * @yields {Object}
   * @memberof FileLoaderFactory.prototype
   * @public
   */
  async * getBundle(bundleName, extension, config) {
    let bundles = await this.getLoader(config).getBundle(bundleName);

    if (extension) {
      bundles = yield * this.bundleFilter(bundles, extension);
    }

    return bundles;
  }
  /**
   * the filter using extension for bundle
   * @param {Object} bundles - the list of bundle generated by webpack
   * @param {string} extension - the filename extension
   * @yields {Object}
   * @memberof FileLoaderFactory#
   * @public
   */
  *bundleFilter(bundles, extension) {
    if (!bundles) return [];

    const regexp = new RegExp(`\.${extension}$`, 'g');
    for (const bundle of bundles) {
      if (!regexp.test(bundle)) continue;
      yield bundle;
    }
  }
  /**
   * get tags within the nunjucks template
   * @param {string} bundleName - the name of bundle
   * @param {string} [extension=''] - the filename extension
   * @param {Object} config - the mixed config, including the base config and the group name
   * @param {Object} config.baseConfig - the base config
   * @param {string} config.groupName - the name of group
   * @param {string} [attr=''] - the attribute information of html tag
   * @returns {Array}
   * @memberof FileLoaderFactory
   * @instance
   * @public
   */
  async getAttrs(bundleName, extension = '', config, attr = '') {
    const tags = [];
    const bundles = this.getBundle(bundleName, extension, config);
    const realBundles = [];

    for await (const bundle of bundles) {
      realBundles.push(bundle);
    }

    return realBundles;
  }
}

export default new FileLoaderFactory();
