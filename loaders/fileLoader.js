/**
 * @file 读取文件 FileLoader 模块
 * @author liuliang(liuliang@w3ctech.com)
 */

import findConfig from 'find-config';
import {
    base
} from '../configs';

/**
 * FileLoader 模块
 * @module module:fileLoader
 * @exports module:fileLoader.FileLoader
 */
export default class FileLoader {
    /**
     * a static member, module:fileLoader.FileLoader.asset
     * @memberof FileLoader
     * @static
     * @public
     */
    static asset = {};
    /**
     * an instance member, module:fileLoader.FileLoader#name
     * @memberof FileLoader.prototype
     * @public
     */
    name;
    /**
     * an instance member, module:fileLoader.FileLoader#config
     * @memberof FileLoader#
     * @public
     */
    config;
    /**
     * Create a fileLoader
     * @param {string} [name=default] - the field name of a object for configuration
     * @public
     */
    constructor(name = 'default') {
        this.config = base.loadConfig(this.name = name);
    }
    /**
     * load asset
     * @returns {?Object}
     * @memberof FileLoader
     * @instance
     * @public
     */
    loadAsset() {
        const {
            statsFile
        } = this.config;

        const stats = findConfig.require(statsFile, {
            home: false
        })
        return stats ? stats : null;
    }
    /**
     * get asset
     * @returns {Object}
     * @memberof FileLoader.prototype
     * @public
     */
    getAsset() {
        const {
            config: {
                isCache
            } = {},
            name
        } = this;

        if (!isCache) return this.loadAsset();
        if (!FileLoader.asset[name]) FileLoader.asset[name] = this.loadAsset();
        return FileLoader.asset[name];
    }
    /**
     * the filter using the value of ignore field for chunks
     * @param {[Object]} chunks - the list of chunk generated by webpack
     * @returns {Object}
     * @memberof FileLoader#
     * @public
     */
    chunksFilter(chunks) {

    }
    /**
     * get the url of chunk
     * @param {Object} chunk - chunk generated by webpack
     * @returns {string}
     * @memberof FileLoader
     * @instance
     * @public
     */
    getChunkUrl(chunk) {

    }
    /**
     * get bundle
     * @param {string} bundleName - the name of bundle
     * @returns {Object}
     * @memberof FileLoader.prototype
     * @public
     */
    getBundle(bundleName) {
        const asset = this.getAsset();
        const {
            isDebug
        } = this.config;

        console.log(asset);
    }
}
